const filterOptions: Record<string, FilterOption[]> = {
		status: [
			{ value: 'active', label: 'Active' },
			{ value: 'completed', label: 'Completed' },
			{ value: 'pending', label: 'Pending' },
		],
		loan_type: [
			{ value: 'Personal Loan', label: 'Personal Loan' },
			{ value: 'Salary Advance', label: 'Salary Advance' },
			{ value: 'Emergency Loan', label: 'Emergency Loan' },
			{ value: 'Housing Loan', label: 'Housing Loan' },
		],
	};

	const sortOptions: SortOption[] = [
		{ value: 'loan_number', label: 'Loan Number' },
		{ value: 'amount', label: 'Loan Amount' },
		{ value: 'balance', label: 'Outstanding Balance' },
		{ value: 'start_date', label: 'Start Date' },
		{ value: 'end_date', label: 'End Date' },
		{ value: 'monthly_deduction', label: 'Monthly Deduction' },
	];

	// FilterSort handlers
	const handleSearchChange = (value: string) => {
		setSearchValue(value);
		setCurrentPage(1);
	};

	const handleFilterChange = (filterKey: string, value: string) => {
		setFilters(prev => ({
			...prev,
			[filterKey]: value,
		}));
		setCurrentPage(1);
	};

	const handleSortChange = (newSortBy: string) => {
		setSortBy(newSortBy);
		setCurrentPage(1);
	};

	const handleSortOrderChange = (order: 'asc' | 'desc') => {
		setSortOrder(order);
		setCurrentPage(1);
	};

	// Format currency
	const formatCurrency = (amount: number) => {
		return new Intl.NumberFormat('en-NG', {
			style: 'currency',
			currency: 'NGN',
			minimumFractionDigits: 2,
		}).format(amount).replace('NGN', 'â‚¦');
	};

	// Safe number parsing
	const parseAmount = (value?: string | number): number => {
		if (typeof value === 'number') return value;
		return parseFloat(value?.toString() || '0') || 0;
	};

	// Filter and sort loans
	const filteredAndSortedLoans = useMemo(() => {
		let filtered = loans.filter(loan => {
			// Search filter
			const searchLower = searchValue.toLowerCase();
			const matchesSearch = !searchValue ||
				loan.loan_number.toLowerCase().includes(searchLower) ||
				loan.loan_type?.toLowerCase().includes(searchLower) ||
				loan.employee_name?.toLowerCase().includes(searchLower);

			// Status filter
			const matchesStatus = filters.status === 'All' ||
				loan.status?.toLowerCase() === filters.status.toLowerCase();

			// Loan type filter
			const matchesLoanType = filters.loan_type === 'All' ||
				loan.loan_type === filters.loan_type;

			return matchesSearch && matchesStatus && matchesLoanType;
		});

		// Sort loans
		filtered.sort((a, b) => {
			let aValue: any = a[sortBy as keyof Loan];
			let bValue: any = b[sortBy as keyof Loan];

			// Handle different data types
			if (['amount', 'balance', 'monthly_deduction'].includes(sortBy)) {
				aValue = parseAmount(aValue);
				bValue = parseAmount(bValue);
			} else if (['start_date', 'end_date'].includes(sortBy)) {
				aValue = new Date(aValue || '').getTime();
				bValue = new Date(bValue || '').getTime();
			} else {
				aValue = String(aValue || '').toLowerCase();
				bValue = String(bValue || '').toLowerCase();
			}

			if (aValue < bValue) return sortOrder === 'asc' ? -1 : 1;
			if (aValue > bValue) return sortOrder === 'asc' ? 1 : -1;
			return 0;
		});

		return filtered;
	}, [loans, searchValue, filters, sortBy, sortOrder]);

	// Pagination calculations
	const paginationInfo: PaginationInfo = useMemo(() => {
		const totalItems = filteredAndSortedLoans.length;
		const totalPages = Math.ceil(totalItems / itemsPerPage);

		return {
			currentPage,
			itemsPerPage,
			totalItems,
			totalPages,
		};
	}, [filteredAndSortedLoans.length, currentPage, itemsPerPage]);

	// Get current page data
	const currentLoans = useMemo(() => {
		const startIndex = (currentPage - 1) * itemsPerPage;
		const endIndex = startIndex + itemsPerPage;
		return filteredAndSortedLoans.slice(startIndex, endIndex);
	}, [filteredAndSortedLoans, currentPage, itemsPerPage]);

	// Pagination handlers
	const handlePageChange = (page: number): void => {
		if (page >= 1 && page <= paginationInfo.totalPages) {
			setCurrentPage(page);
		}
	};

	const handleItemsPerPageChange = (newItemsPerPage: number): void => {
		setItemsPerPage(newItemsPerPage);
		setCurrentPage(1);
	};

	const handleNextPage = (): void => {
		if (currentPage < paginationInfo.totalPages) {
			setCurrentPage(currentPage + 1);
		}
	};

	const handlePreviousPage = (): void => {
		if (currentPage > 1) {
			setCurrentPage(currentPage - 1);
		}
	};

	// Generate page numbers for pagination
	const getPageNumbers = (): (number | string)[] => {
		const { totalPages } = paginationInfo;
		const pages: (number | string)[] = [];

		if (totalPages <= 7) {
			for (let i = 1; i <= totalPages; i++) {
				pages.push(i);
			}
		} else {
			pages.push(1);

			if (currentPage > 3) {
				pages.push('...');
			}

			const start = Math.max(2, currentPage - 1);
			const end = Math.min(totalPages - 1, currentPage + 1);

			for (let i = start; i <= end; i++) {
				pages.push(i);
			}

			if (currentPage < totalPages - 2) {
				pages.push('...');
			}

			pages.push(totalPages);
		}

		return pages;
	};



    if (loading) {
		return (
			<Loading
				message='Loading Loans...'
				size='medium'
				variant='spinner'
				overlay={false}
			/>
		);
	}


    <FilterSort
						searchValue={searchValue}
						onSearchChange={handleSearchChange}
						searchPlaceholder="Search loans..."
						filters={filters}
						filterOptions={filterOptions}
						onFilterChange={handleFilterChange}
						sortBy={sortBy}
						sortOrder={sortOrder}
						sortOptions={sortOptions}
						onSortChange={handleSortChange}
						onSortOrderChange={handleSortOrderChange}
						className="mb-6"
					/>